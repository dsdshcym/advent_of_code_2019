defmodule IntcodeMachineTest do
  use ExUnit.Case, async: true

  @input "3,225,1,225,6,6,1100,1,238,225,104,0,1102,83,20,225,1102,55,83,224,1001,224,-4565,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,52,15,225,1102,42,92,225,1101,24,65,225,101,33,44,224,101,-125,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,39,75,224,101,-127,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,2,14,48,224,101,-1300,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1002,139,79,224,101,-1896,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,24,92,225,1101,20,53,224,101,-73,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,70,33,225,1101,56,33,225,1,196,170,224,1001,224,-38,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1101,50,5,225,102,91,166,224,1001,224,-3003,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,389,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,434,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,494,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,509,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226"
  @boost "1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,1,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,0,1020,1101,34,0,1004,1101,0,26,1008,1102,1,37,1011,1101,39,0,1018,1102,587,1,1022,1101,1,0,1021,1102,22,1,1012,1101,0,33,1014,1101,24,0,1016,1101,0,752,1029,1101,36,0,1002,1101,35,0,1006,1101,32,0,1009,1102,38,1,1003,1102,584,1,1023,1101,0,20,1001,1102,892,1,1025,1102,29,1,1000,1101,411,0,1026,1102,1,901,1024,1101,0,761,1028,1101,23,0,1017,1102,30,1,1013,1101,0,27,1015,1102,28,1,1005,1101,408,0,1027,1101,25,0,1007,1102,31,1,1019,1101,0,21,1010,109,5,1207,-2,39,63,1005,63,199,4,187,1105,1,203,1001,64,1,64,1002,64,2,64,109,12,21102,40,1,-1,1008,1016,40,63,1005,63,229,4,209,1001,64,1,64,1106,0,229,1002,64,2,64,109,-5,1207,-5,24,63,1005,63,249,1001,64,1,64,1106,0,251,4,235,1002,64,2,64,109,-14,2102,1,6,63,1008,63,32,63,1005,63,271,1106,0,277,4,257,1001,64,1,64,1002,64,2,64,109,2,1202,1,1,63,1008,63,20,63,1005,63,303,4,283,1001,64,1,64,1106,0,303,1002,64,2,64,109,7,2108,34,2,63,1005,63,319,1106,0,325,4,309,1001,64,1,64,1002,64,2,64,109,6,2101,0,-6,63,1008,63,24,63,1005,63,349,1001,64,1,64,1105,1,351,4,331,1002,64,2,64,109,4,21107,41,42,0,1005,1017,369,4,357,1105,1,373,1001,64,1,64,1002,64,2,64,109,5,21101,42,0,-5,1008,1017,41,63,1005,63,397,1001,64,1,64,1106,0,399,4,379,1002,64,2,64,109,9,2106,0,-4,1106,0,417,4,405,1001,64,1,64,1002,64,2,64,109,-20,21108,43,43,0,1005,1011,435,4,423,1105,1,439,1001,64,1,64,1002,64,2,64,109,-15,2102,1,8,63,1008,63,34,63,1005,63,465,4,445,1001,64,1,64,1105,1,465,1002,64,2,64,109,3,1201,6,0,63,1008,63,28,63,1005,63,491,4,471,1001,64,1,64,1106,0,491,1002,64,2,64,109,18,21108,44,46,0,1005,1017,511,1001,64,1,64,1106,0,513,4,497,1002,64,2,64,109,12,1205,-8,527,4,519,1105,1,531,1001,64,1,64,1002,64,2,64,109,-17,1208,-3,32,63,1005,63,553,4,537,1001,64,1,64,1105,1,553,1002,64,2,64,109,-13,1208,10,31,63,1005,63,573,1001,64,1,64,1105,1,575,4,559,1002,64,2,64,109,17,2105,1,7,1105,1,593,4,581,1001,64,1,64,1002,64,2,64,109,-8,2107,19,-7,63,1005,63,615,4,599,1001,64,1,64,1105,1,615,1002,64,2,64,109,4,1206,8,629,4,621,1106,0,633,1001,64,1,64,1002,64,2,64,109,-2,2101,0,-6,63,1008,63,34,63,1005,63,655,4,639,1105,1,659,1001,64,1,64,1002,64,2,64,109,10,1205,0,671,1105,1,677,4,665,1001,64,1,64,1002,64,2,64,109,-21,2107,26,8,63,1005,63,693,1106,0,699,4,683,1001,64,1,64,1002,64,2,64,109,19,1201,-9,0,63,1008,63,30,63,1005,63,719,1105,1,725,4,705,1001,64,1,64,1002,64,2,64,109,9,1206,-6,741,1001,64,1,64,1106,0,743,4,731,1002,64,2,64,109,-5,2106,0,6,4,749,1001,64,1,64,1105,1,761,1002,64,2,64,109,-14,1202,-1,1,63,1008,63,27,63,1005,63,781,1105,1,787,4,767,1001,64,1,64,1002,64,2,64,109,1,21107,45,44,5,1005,1014,807,1001,64,1,64,1105,1,809,4,793,1002,64,2,64,109,8,21101,46,0,0,1008,1017,46,63,1005,63,835,4,815,1001,64,1,64,1106,0,835,1002,64,2,64,109,-26,2108,20,10,63,1005,63,857,4,841,1001,64,1,64,1106,0,857,1002,64,2,64,109,24,21102,47,1,-5,1008,1010,46,63,1005,63,881,1001,64,1,64,1106,0,883,4,863,1002,64,2,64,109,6,2105,1,3,4,889,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21101,915,0,0,1105,1,922,21201,1,29830,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1105,1,922,21202,1,1,-1,21201,-2,-3,1,21102,1,957,0,1105,1,922,22201,1,-1,-2,1105,1,968,21201,-2,0,-2,109,-3,2106,0,0"

  describe "parse/1" do
    test "returns a values by address map" do
      assert IntcodeMachine.parse("3,225,1,225") ==
               %IntcodeMachine{
                 ip: 0,
                 memory: %{0 => 3, 1 => 225, 2 => 1, 3 => 225},
                 inputs: [1],
                 outputs: []
               }
    end
  end

  describe "step/1" do
    test "plus" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1, 2, 3, 0])))

      assert ip == 4
      assert memory == build(:memory, [3, 2, 3, 0])
    end

    test "plus with immediate mode" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1101, 30, 23, 0])))

      assert ip == 4
      assert memory == build(:memory, [53, 30, 23, 0])
    end

    test "multiply" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 1, build(:memory, [0, 2, 2, 3, 0])))

      assert ip == 5
      assert memory == build(:memory, [6, 2, 2, 3, 0])
    end

    test "multiply with immediate mode" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1102, 3, 13, 0])))

      assert ip == 4
      assert memory == build(:memory, [39, 3, 13, 0])
    end

    test "input" do
      {:ok, %{ip: ip, memory: memory, inputs: rest_inputs}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [3, 1]), [30, 2]))

      assert ip == 2
      assert memory == build(:memory, [3, 30])
      assert rest_inputs == [2]

      assert {:await_on_input, input_callback} =
               IntcodeMachine.step(build(:machine, 0, build(:memory, [3, 1]), []))

      assert {ip, memory} = input_callback.(30)
      assert ip == 2
      assert memory == build(:memory, [3, 30])

      assert {:ok, %{memory: memory}} =
               IntcodeMachine.step(build(:machine, 0, build(:memory, [203, -1]), [30], [], 2))

      assert memory = build(:memory, [3, 30])
    end

    test "output" do
      {:output, %{ip: ip, memory: memory, outputs: new_output}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [4, 0]), [], [2]))

      assert ip == 2
      assert memory == build(:memory, [4, 0])
      assert new_output == [2, 4]
    end

    test "jump-if-true" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [5, 2, 0]), [1], [2]))

      assert ip == 3
      assert memory == build(:memory, [5, 2, 0])

      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [105, 2, 0]), [1], [2]))

      assert ip == 105
      assert memory == build(:memory, [105, 2, 0])
    end

    test "jump-if-false" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [6, 2, 0]), [1], [2]))

      assert ip == 6
      assert memory == build(:memory, [6, 2, 0])

      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1106, 2, 0]), [1], [2]))

      assert ip == 3
      assert memory == build(:memory, [1106, 2, 0])
    end

    test "less than" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1107, 2, 0, 1]), [1], [2]))

      assert ip == 4
      assert memory == build(:memory, [1107, 0, 0, 1])

      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1107, -2, 0, 2]), [1], [2]))

      assert ip == 4
      assert memory == build(:memory, [1107, -2, 1, 2])
    end

    test "equals" do
      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1108, 0, 0, 2]), [1], [2]))

      assert ip == 4
      assert memory == build(:memory, [1108, 0, 1, 2])

      {:ok, %{ip: ip, memory: memory}} =
        IntcodeMachine.step(build(:machine, 0, build(:memory, [1108, 3, 0, 1]), [1], [2]))

      assert ip == 4
      assert memory == build(:memory, [1108, 0, 0, 1])
    end

    test "adjusts the relative base" do
      {:ok, machine} = IntcodeMachine.step(build(:machine, 0, build(:memory, [109, 19])))

      assert machine.ip == 2
      assert machine.relative_base == 19
    end
  end

  describe "new/1" do
    test "part 1" do
      output = IntcodeMachine.new(@input).([1])
      assert List.last(output) == 12_428_642
    end

    test "part 2" do
      assert [1] = IntcodeMachine.new("3,9,8,9,10,9,4,9,99,-1,8").([8])

      assert [0] = IntcodeMachine.new("3,9,8,9,10,9,4,9,99,-1,8").([2])

      assert [1] = IntcodeMachine.new("3,9,7,9,10,9,4,9,99,-1,8").([7])

      assert [0] = IntcodeMachine.new("3,9,7,9,10,9,4,9,99,-1,8").([8])

      assert [1] = IntcodeMachine.new("3,3,1108,-1,8,3,4,3,99").([8])

      assert [0] = IntcodeMachine.new("3,3,1108,-1,8,3,4,3,99").([9])

      assert [1] = IntcodeMachine.new("3,3,1107,-1,8,3,4,3,99").([6])

      assert [0] = IntcodeMachine.new("3,3,1107,-1,8,3,4,3,99").([8])

      assert [999] =
               IntcodeMachine.new(
                 "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
               ).([7])

      assert [1000] =
               IntcodeMachine.new(
                 "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
               ).([8])

      assert [1001] =
               IntcodeMachine.new(
                 "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
               ).([9])

      assert [918_655] = IntcodeMachine.new(@input).([5])
    end
  end

  describe "day 9" do
    test "part 1" do
      assert IntcodeMachine.new("109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99").([]) ==
               [109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99]

      assert IntcodeMachine.new("1102,34915192,34915192,7,4,7,99,0").([]) == [
               1_219_070_632_396_864
             ]

      assert IntcodeMachine.new("104,1125899906842624,99").([]) == [1_125_899_906_842_624]

      assert IntcodeMachine.new(@boost).([1]) == [2_745_604_242]
    end
  end

  def build(:memory, list) do
    list
    |> Enum.with_index()
    |> Enum.map(fn {value, address} -> {address, value} end)
    |> Map.new()
  end

  def build(:machine, ip, memory, input \\ [], output \\ [], relative_base \\ 0) do
    %IntcodeMachine{
      ip: ip,
      memory: memory,
      inputs: input,
      outputs: output,
      relative_base: relative_base
    }
  end
end
